name: 'Create GitHub Repo'
on: 
  workflow_call:
    inputs:
      REPO_NAME:
        description: 'Defines the repo name'
        required: true
        type: string
      TEMPLATE_REPO_URL:
        description: 'Defines the repo to use as a template to copy the code into'
        required: true
        type: string
    outputs:
      NEW_REPO_URL:
        description: 'The URL of the new repo that was created'
        value: ${{ jobs.create_repo.outputs.NEW_REPO_API_URL }}
      NEW_REPO_FULL_NAME:
        description: 'The full name of the new repo that was created'
        value: ${{ jobs.create_repo.outputs.NEW_REPO_FULL_NAME }}
      NEW_REPO_DEFAULT_BRANCH:
        description: 'The default branch of the new repo that was created'
        value: ${{ jobs.create_repo.outputs.NEW_REPO_DEFAULT_BRANCH }}
        
jobs:
  create_repo:
    runs-on: ubuntu-latest
    outputs:
      NEW_REPO_API_URL: ${{ env.NEW_REPO_API_URL }}
      NEW_REPO_URL: ${{ env.NEW_REPO_URL }}
      NEW_REPO_FULL_NAME: ${{ env.NEW_REPO_FULL_NAME }}
      NEW_REPO_DEFAULT_BRANCH: ${{ env.NEW_REPO_DEFAULT_BRANCH }}
    steps:
    # - name: 'Create new repo'
    #   run: |
    #     # Used for organization GitHub Accounts
    #     # repoOutput=$(curl -X POST 'https://api.github.com/orgs/${{ vars.GH_ORG }}/repos' \
    #     # Used for Personal GitHub Accounts
    #     repoOutput=$(curl -X POST 'https://api.github.com/user/repos' \
    #     -H "Accept: application/vnd.github+json" \
    #     -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
    #     -H "X-GitHub-Api-Version: 2022-11-28" \
    #     -d '{"name":"${{ inputs.REPO_NAME }}","private":true}')
    #     newRepoId=$(echo $repoOutput | jq '.id' -r )
    #     newRepoApiUrl=$(echo $repoOutput | jq '.url' -r )
    #     newRepoName=$(echo $repoOutput | jq '.full_name' -r )
    #     newRepoUrl=$(echo $repoOutput | jq '.html_url' -r )
    #     newRepoDefaultBranch=$(echo $repoOutput | jq '.default_branch' -r )
    #     if [ -z "$newRepoApiUrl" ]; then exit 2 ; fi 
    #     echo "New Repo ID is: "$newRepoId
    #     echo "New Repo API URL is: "$newRepoApiUrl
    #     echo "New Repo Name is: "$newRepoName
    #     echo "New Repo URL is: "$newRepoUrl
    #     echo "New Repo Default Branch is: "$newRepoDefaultBranch
    #     echo "NEW_REPO_ID=$newRepoId" >> $GITHUB_ENV
    #     echo "NEW_REPO_API_URL=$newRepoApiUrl" >> $GITHUB_ENV
    #     echo "NEW_REPO_URL=$newRepoApiUrl" >> $GITHUB_ENV
    #     echo "NEW_REPO_FULL_NAME=$newRepoName" >> $GITHUB_ENV
    #     echo "NEW_REPO_DEFAULT_BRANCH=$newRepoDefaultBranch" >> $GITHUB_ENV
    # - name: 'Disable GitHub Actions'
    #   run: |
    #     output=$(curl -X DELETE 'https://api.github.com/orgs/${{ vars.GH_ORG }}/actions/permissions/repositories/${{ env.NEW_REPO_ID }}' \
    #     -H "Accept: application/vnd.github+json" \
    #     -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
    #     -H "X-GitHub-Api-Version: 2022-11-28" \
    #     -d '{"allowedactions": "disabled"'} )
    #     echo $output
    #     # importStatus=$(echo $output | jq '.status' -r )
    #     # if [ -z "$importStatus" ]; then exit 2 ; fi 
    - name: 'Import template repo'
      run: |
        importOutput=$(curl -X PUT '${{ env.TEMPLATE_REPO_URL}}/generate' \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        -d '{"owner":"{{ vars.GH_ORG }}","name":"${{ inputs.REPO_NAME }}","description":"Generated from template: ${{ env.TEMPLATE_REPO_URL}}","include_all_branches":false,"private":false}')
        # echo $importOutput
        # importStatus=$(echo $importOutput | jq '.status' -r )
        # if [ -z "$importStatus" ]; then exit 2 ; fi
        newRepoId=$(echo $importOutput | jq '.id' -r )
        newRepoApiUrl=$(echo $importOutput | jq '.url' -r )
        newRepoName=$(echo $importOutput | jq '.full_name' -r )
        newRepoUrl=$(echo $importOutput | jq '.html_url' -r )
        newRepoDefaultBranch=$(echo $importOutput | jq '.default_branch' -r )
        if [ -z "$newRepoApiUrl" ]; then exit 2 ; fi 
        echo "New Repo ID is: "$newRepoId
        echo "New Repo API URL is: "$newRepoApiUrl
        echo "New Repo Name is: "$newRepoName
        echo "New Repo URL is: "$newRepoUrl
        echo "New Repo Default Branch is: "$newRepoDefaultBranch
        echo "NEW_REPO_ID=$newRepoId" >> $GITHUB_ENV
        echo "NEW_REPO_API_URL=$newRepoApiUrl" >> $GITHUB_ENV
        echo "NEW_REPO_URL=$newRepoApiUrl" >> $GITHUB_ENV
        echo "NEW_REPO_FULL_NAME=$newRepoName" >> $GITHUB_ENV
        echo "NEW_REPO_DEFAULT_BRANCH=$newRepoDefaultBranch" >> $GITHUB_ENV
    - name: 'Confirming Import was successful'
      shell: bash
      run: |
        while [ "$importStatus" != "complete" ]
        do
          sleep 15
          importStatus=$(curl -X GET '${{ env.NEW_REPO_API_URL }}/import' \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" | jq '.status' -r )
          echo 'importStatus: '$importStatus
          if [ -z "$importStatus" ]; then exit 2 ; fi
        done
    # - name: 'Enable GitHub Actions'
    #   run: |
    #     output=$(curl -X PUT 'https://api.github.com/orgs/${{ vars.GH_ORG }}/actions/permissions/repositories/${{ env.NEW_REPO_ID }}' \
    #     -H "Accept: application/vnd.github+json" \
    #     -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
    #     -H "X-GitHub-Api-Version: 2022-11-28" )
    #     -d '{"allowedactions": "all"'} )
    #     echo $output
    #     # importStatus=$(echo $output | jq '.status' -r )
    #     if [ -z "$importStatus" ]; then exit 2 ; fi 

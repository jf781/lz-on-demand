name: 'Trigger Workflow'
on:
  workflow_dispatch:
    inputs:
      TEMPLATE_REPO_URL: 
        description: 'URL of template repo'
        required: true
        type: string
      PARENT_MGMT_GRP_NAME:
        description: 'Defines the name of the parent management group'
        required: true
        type: string
      MGMT_GRP_POLICIES:
        description: 'Defines the policies that will be applied to the management group'
        required: true
        type: string
      SUBSCRIPTION_NAME:
        description: 'Defines the name of the subscription'
        required: true
        type: string
      TAGS:
        description: 'JSON to define tags'
        required: false
        default: '{}'
      VNET:
        description: 'JSON to define Vnet Settings'
        required: false
        default: '{}'
      RBAC:
        description: 'JSON to define RBAC Settings'
        required: false
        default: '{}'
      BUDGET:
        description: 'JSON to define Budget Settings'
        required: false
        default: '{}'
      SUBNETS:
        description: 'JSON to define Subnets'
        required: false
        default: '{}'      


jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    outputs:
      WORKSPACE_NAME: ${{ env.WORKSPACE_NAME }}
      REGION: ${{ env.REGION }}
      TEMPLATE_REPO: ${{ env.TEMPLATE_REPO }}
    steps:
    - name: 'define-orgName-variable'
      shell: pwsh
      run: |
        # Define organization name
        $orgName = "${{ inputs.PARENT_MGMT_GRP_NAME }}".split('-')[1]
        echo "TFC_ORG_NAME: $orgName"
        echo "TFC_ORG_NAME=$orgName" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        # Define region
        $regionTable = @{"w1" = "westus"; "w2" = "westus2"; "w3" = "westus3"; "e1" = "eastus"; "e2" = "eastus2"; "c1" = "centralus"; "sc1" = "southcentralus"}
        $region = $regionTable.${{ fromJSON(inputs.TAGS).region }}
        echo "REGION: $region"
        echo "REGION=$region" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
    - name: 'define-runtime-variables'
      run: |
        unformattedBaseName=$(echo ${{ env.TFC_ORG_NAME  }}-${{ fromJSON(inputs.TAGS).environment }}-${{ fromJSON(inputs.TAGS).value_stream }})
        echo "unformattedBaseName = $unformattedBaseName"
        baseName=$(echo $unformattedBaseName | tr '[:upper:]' '[:lower:]' | sed 's/ /-/g')
        echo "BASE_NAME = $baseName"
        workspaceName=$(echo 'ws-'$baseName)
        echo "WORKSPACE_NAME = $workspaceName"
        echo "WORKSPACE_NAME=$workspaceName" >> $GITHUB_ENV
        if [[ ${{ inputs.TEMPLATE_REPO_URL }} == *"api.github.com"* ]]; then
          echo "TEMPLATE_REPO is a GitHub API URL: ${{ inputs.TEMPLATE_REPO_URL }}"
          echo "TEMPLATE_REPO=${{ inputs.TEMPLATE_REPO_URL }}" >> $GITHUB_ENV
        else
          apiGitHubUrl=$(echo ${{ inputs.TEMPLATE_REPO_URL }} | sed  's/github.com/api.github.com/g')
          echo "Updated TEMPLATE_REPO to be a GitHub API URL: $apiGitHubUrl"
          echo "TEMPLATE_REPO=$apiGitHubUrl" >> $GITHUB_ENV
        fi
    - name: 'test-if-${{ env.WORKSPACE_NAME }}-exists'
      run: |
        repoTestOutput=$(curl https://api.github.com/repos/${{ env.GH_ORG }}/${{ env.WORKSPACE_NAME }}\
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28")         
        repoExists=$( echo $repoTestOutput | jq '.id' -r )
        if [ "$repoExists" != 'null' ]; then 
          repo_exists="true"
        else
          repo_exists="false"
        fi 
        echo $repo_exists
  call-workflow-create-gh-repo:
    name: 'Create new GitHub Repo based on Templare URL'
    uses: ./.github/workflows/create-gh-repo.yml
    needs: validate-inputs
    with:
      REPO_NAME: ${{ needs.validate-inputs.outputs.WORKSPACE_NAME }}
      TEMPLATE_REPO_URL:  ${{ needs.validate-inputs.outputs.TEMPLATE_REPO }}
    secrets: inherit
  call-workflow-update-tfc-provider-file:
    name: 'Updates the provider.tf file with the details of the TFC Workspace'
    uses: ./.github/workflows/update-tfc-provider-file.yml
    needs: [validate-inputs, call-workflow-create-gh-repo]
    with:
      WORKSPACE_NAME: ${{ needs.validate-inputs.outputs.WORKSPACE_NAME }}
      TFC_ORG_NAME:  ${{ vars.TFC_ORG_NAME }}
      TFC_REPO: ${{ needs.call-workflow-create-gh-repo.outputs.NEW_REPO_FULL_NAME }}
      TFC_REPO_BRANCH: ${{ needs.call-workflow-create-gh-repo.outputs.NEW_REPO_DEFAULT_BRANCH }}
    secrets: inherit
  call-workflow-update-tfvars-file:
    name: 'Updates TFVars with the Landing Zone details'
    uses: ./.github/workflows/update-tfvars-file.yml
    needs: [call-workflow-create-gh-repo, call-workflow-update-tfc-provider-file]
    with:
      TFC_REPO: ${{ needs.call-workflow-create-gh-repo.outputs.NEW_REPO_FULL_NAME }}
      TFC_REPO_BRANCH: "${{ needs.call-workflow-create-gh-repo.outputs.NEW_REPO_DEFAULT_BRANCH }}"
      PARENT_MGMT_GRP_NAME: ${{ inputs.PARENT_MGMT_GRP_NAME }}
      MGMT_GRP_POLICIES: ${{ inputs.MGMT_GRP_POLICIES }}
      SUBSCRIPTION_NAME: ${{ inputs.SUBSCRIPTION_NAME}}
      TAGS: ${{ inputs.TAGS }}
      VNET: ${{ inputs.VNET }}
      RBAC: ${{ inputs.RBAC }}
      BUDGET: ${{ inputs.BUDGET }}
      SUBNETS: ${{ inputs.SUBNETS }}
    secrets: inherit
  call-workflow-initialize-tfc-workspace:
    name: 'Initialize TFC Workspace and define variables'
    uses: ./.github/workflows/initialize-tfc-workspace.yml
    needs: [validate-inputs,call-workflow-create-gh-repo, call-workflow-update-tfc-provider-file, call-workflow-update-tfvars-file]
    with:
      WORKSPACE_NAME: ${{ needs.validate-inputs.outputs.WORKSPACE_NAME }}
      TFC_ORG_NAME:  ${{ vars.TFC_ORG_NAME }}
      TFC_REPO: ${{ needs.call-workflow-create-gh-repo.outputs.NEW_REPO_FULL_NAME }}
      TFC_REPO_BRANCH: ${{ needs.call-workflow-create-gh-repo.outputs.NEW_REPO_DEFAULT_BRANCH }}
      TAGS: ${{ inputs.TAGS }}
      REGION: ${{ needs.validate-inputs.outputs.REGION }}
    secrets: inherit
  call-workflow-apply-tfc-workspace:
    name: 'Apply TFC Workspace'
    uses: ./.github/workflows/apply-tfc-workspace.yml
    needs: [validate-inputs, call-workflow-create-gh-repo, call-workflow-update-tfc-provider-file, call-workflow-initialize-tfc-workspace, call-workflow-update-tfvars-file]
    with:
      WORKSPACE_NAME: ${{ needs.validate-inputs.outputs.WORKSPACE_NAME }}
      # TFC_ORG_NAME:  ${{ vars.TFC_ORG_NAME }}
      TFC_REPO: ${{ needs.call-workflow-create-gh-repo.outputs.NEW_REPO_FULL_NAME }}
      TFC_REPO_BRANCH: ${{ needs.call-workflow-create-gh-repo.outputs.NEW_REPO_DEFAULT_BRANCH }}
      TFC_WORKSPACE_ID: ${{ needs.call-workflow-initialize-tfc-workspace.outputs.TFC_WORKSPACE_ID }}
    secrets: inherit

